generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String       @id @default(cuid())
  name               String?
  email              String       @unique
  emailVerified      DateTime?
  image              String?
  activationToken    String?      @unique
  activationExpires  DateTime?
  accounts           Account[]
  auditLogs          AuditLog[]
  createdInvitations Invitation[] @relation("InvitationCreator")
  memberships        Membership[]
  sessions           Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id          String       @id @default(cuid())
  name        String
  createdAt   DateTime     @default(now())
  auditLogs   AuditLog[]
  contacts    Contact[]
  invitations Invitation[]
  memberships Membership[]
}

model Membership {
  id     String       @id @default(cuid())
  userId String
  orgId  String
  role   Role
  org    Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user   User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, orgId])
}

model Invitation {
  id         String       @id @default(cuid())
  orgId      String
  email      String
  role       Role
  token      String       @unique
  expiresAt  DateTime
  acceptedAt DateTime?
  createdBy  String
  createdAt  DateTime     @default(now())
  creator    User         @relation("InvitationCreator", fields: [createdBy], references: [id])
  org        Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id        String       @id @default(cuid())
  orgId     String
  actorId   String
  action    String
  target    String?
  ip        String?
  userAgent String?
  createdAt DateTime     @default(now())
  actor     User         @relation(fields: [actorId], references: [id])
  org       Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
}

model Contact {
  id        String       @id @default(cuid())
  orgId     String
  name      String
  email     String?
  phone     String?
  tags      String[]     @default([])
  notes     String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  org       Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
}

enum Role {
  OWNER
  MANAGER
  AGENT
}
