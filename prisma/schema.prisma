generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String       @id @default(cuid())
  name               String?
  firstName          String?
  lastName           String?
  email              String       @unique
  organization       String?
  password           String?
  emailVerified      DateTime?
  image              String?
  activationToken    String?      @unique
  activationExpires  DateTime?
  resetToken         String?      @unique
  resetExpires       DateTime?
  accounts           Account[]
  auditLogs          AuditLog[]
  createdInvitations Invitation[] @relation("InvitationCreator")
  memberships        Membership[]
  sessions           Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id                    String                @id @default(cuid())
  name                  String
  logo                  String?
  timezone              String                @default("UTC")
  businessHours         Json?                 // Store business hours as JSON
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  appointments          Appointment[]
  auditLogs             AuditLog[]
  complaints            Complaint[]
  contacts              Contact[]
  invitations           Invitation[]
  memberships           Membership[]
}

model Membership {
  id     String       @id @default(cuid())
  userId String
  orgId  String
  role   Role
  org    Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user   User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, orgId])
}

model Invitation {
  id         String       @id @default(cuid())
  orgId      String
  email      String
  role       Role
  token      String       @unique
  expiresAt  DateTime
  acceptedAt DateTime?
  createdBy  String
  createdAt  DateTime     @default(now())
  creator    User         @relation("InvitationCreator", fields: [createdBy], references: [id])
  org        Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id        String       @id @default(cuid())
  orgId     String
  actorId   String
  action    String
  target    String?
  ip        String?
  userAgent String?
  createdAt DateTime     @default(now())
  actor     User         @relation(fields: [actorId], references: [id])
  org       Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
}

model Contact {
  id        String       @id @default(cuid())
  orgId     String
  name      String
  email     String?
  phone     String?
  tags      String[]     @default([])
  notes     String?
  source    String?      // Source of the contact (e.g., "calendar", "manual", "import")
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  org       Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
}

model Complaint {
  id            String          @id @default(cuid())
  orgId         String
  phoneNumber   String
  callTimestamp DateTime
  description   String?
  status        ComplaintStatus @default(OPEN)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  org           Organization    @relation(fields: [orgId], references: [id], onDelete: Cascade)
}

model Appointment {
  id            String            @id @default(cuid())
  orgId         String
  title         String
  customerName  String
  customerPhone String?
  customerEmail String?
  startsAt      DateTime
  endsAt        DateTime
  status        AppointmentStatus @default(SCHEDULED)
  source        AppointmentSource @default(AGENT)
  description   String?
  notes         String?
  googleEventId String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  org           Organization      @relation(fields: [orgId], references: [id], onDelete: Cascade)
}

enum Role {
  OWNER
  MANAGER
  AGENT
}

enum ComplaintStatus {
  OPEN
  RESOLVED
  CLOSED
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELED
  NO_SHOW
}

enum AppointmentSource {
  WEB
  PHONE
  AGENT
  IMPORTED
}

// Tenant configuration for Google Sheets integration
model Company {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  sheets    CompanySheet[]
  phones    CompanyPhone[]
  cache     SheetCache[]
}

model CompanySheet {
  id            String   @id @default(cuid())
  companyId     String
  spreadsheetId String
  dataRange     String   @default("Calls!A:H")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  @@unique([companyId])
}

model CompanyPhone {
  id        String   @id @default(cuid())
  companyId String
  e164      String   // E.164 format phone number
  createdAt DateTime @default(now())
  
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  @@unique([companyId, e164])
}

// Optional cache for analytics performance
model SheetCache {
  id          String    @id @default(cuid())
  companyId   String
  lastSynced  DateTime
  rowCount    Int
  createdAt   DateTime  @default(now())
  
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  @@unique([companyId])
}
