generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String       @id @default(cuid())
  name               String?
  firstName          String?
  lastName           String?
  email              String       @unique
  organization       String?
  password           String?
  emailVerified      DateTime?
  image              String?
  activationToken    String?      @unique
  activationExpires  DateTime?
  resetToken         String?      @unique
  resetExpires       DateTime?
  accounts           Account[]
  auditLogs          AuditLog[]
  createdInvitations Invitation[] @relation("InvitationCreator")
  memberships        Membership[]
  sessions           Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id                    String                @id @default(cuid())
  name                  String
  logo                  String?
  timezone              String                @default("UTC")
  businessHours         Json?                 // Store business hours as JSON
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  appointments          Appointment[]
  auditLogs             AuditLog[]
  complaints            Complaint[]
  contacts              Contact[]
  invitations           Invitation[]
  memberships           Membership[]
  phoneNumbers          PhoneNumber[]
  aiReceptionistConfigs AiReceptionistConfig[]
  calls                 Call[]
}

model Membership {
  id     String       @id @default(cuid())
  userId String
  orgId  String
  role   Role
  org    Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user   User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, orgId])
}

model Invitation {
  id         String       @id @default(cuid())
  orgId      String
  email      String
  role       Role
  token      String       @unique
  expiresAt  DateTime
  acceptedAt DateTime?
  createdBy  String
  createdAt  DateTime     @default(now())
  creator    User         @relation("InvitationCreator", fields: [createdBy], references: [id])
  org        Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id        String       @id @default(cuid())
  orgId     String
  actorId   String
  action    String
  target    String?
  ip        String?
  userAgent String?
  createdAt DateTime     @default(now())
  actor     User         @relation(fields: [actorId], references: [id])
  org       Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
}

model Contact {
  id        String       @id @default(cuid())
  orgId     String
  name      String
  email     String?
  phone     String?
  tags      String[]     @default([])
  notes     String?
  source    String?      // Source of the contact (e.g., "calendar", "manual", "import")
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  org       Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
}

model Complaint {
  id            String          @id @default(cuid())
  orgId         String
  phoneNumber   String
  callTimestamp DateTime
  description   String?
  status        ComplaintStatus @default(OPEN)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  org           Organization    @relation(fields: [orgId], references: [id], onDelete: Cascade)
}

model Appointment {
  id            String            @id @default(cuid())
  orgId         String
  title         String
  customerName  String
  customerPhone String?
  customerEmail String?
  startsAt      DateTime
  endsAt        DateTime
  status        AppointmentStatus @default(SCHEDULED)
  source        AppointmentSource @default(AGENT)
  description   String?
  notes         String?
  googleEventId String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  org           Organization      @relation(fields: [orgId], references: [id], onDelete: Cascade)
}

enum Role {
  OWNER
  MANAGER
  AGENT
}

enum ComplaintStatus {
  OPEN
  RESOLVED
  CLOSED
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELED
  NO_SHOW
}

enum AppointmentSource {
  WEB
  PHONE
  AGENT
  IMPORTED
  AI_RECEPTIONIST
}

model PhoneNumber {
  id                String       @id @default(cuid())
  orgId             String
  phoneNumber       String       @unique
  friendlyName      String?      // Display name for the number
  provider          String       // "retell", "twilio", "vonage", etc.
  providerId        String?      // Provider-specific ID
  isActive          Boolean      @default(true)
  isPrimary         Boolean      @default(false)
  capabilities      String[]     @default([]) // ["voice", "sms", "fax"]
  webhookUrl        String?      // N8N webhook URL for this number
  retellAgentId     String?      // Retell AI agent ID
  retellApiKey      String?      // Encrypted Retell API key
  n8nWorkflowId     String?      // N8N workflow ID
  n8nWebhookSecret  String?      // Webhook secret for security
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  org               Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  calls             Call[]
  
  @@unique([orgId, phoneNumber])
}

model AiReceptionistConfig {
  id                    String       @id @default(cuid())
  orgId                 String
  name                  String       // Configuration name
  isActive              Boolean      @default(true)
  retellAgentId         String?      // Retell AI agent ID
  retellApiKey          String?      // Encrypted Retell API key
  voiceSettings         Json?        // Voice configuration (speed, pitch, etc.)
  greetingMessage       String?      // Custom greeting message
  businessHoursMessage  String?      // Message for outside business hours
  escalationRules       Json?        // Rules for when to escalate to human
  appointmentSettings   Json?        // Settings for appointment booking
  n8nWorkflowId         String?      // N8N workflow for post-call actions
  n8nWebhookUrl         String?      // N8N webhook URL
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  org                   Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  
  @@unique([orgId, name])
}

model Call {
  id                String       @id @default(cuid())
  orgId             String
  phoneNumberId     String?      // Associated phone number
  externalId        String?      // Provider's call ID
  fromNumber        String
  toNumber          String
  direction         CallDirection
  status            CallStatus
  duration          Int          @default(0) // Duration in seconds
  recordingUrl      String?
  transcript        String?
  transcriptUrl     String?
  intent            String[]     @default([])
  disposition       String?      // "booked", "info", "escalated", etc.
  escalated         Boolean      @default(false)
  escalatedTo       String?      // User ID if escalated
  cost              Decimal?     @db.Decimal(10, 4)
  tags              String[]     @default([])
  metadata          Json?        // Additional call metadata
  startedAt         DateTime
  endedAt           DateTime?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  org               Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  phoneNumber       PhoneNumber? @relation(fields: [phoneNumberId], references: [id])
  
  @@index([orgId, startedAt])
  @@index([fromNumber])
  @@index([toNumber])
}

enum CallDirection {
  INBOUND
  OUTBOUND
}

enum CallStatus {
  RINGING
  IN_PROGRESS
  COMPLETED
  FAILED
  BUSY
  NO_ANSWER
  CANCELLED
}
